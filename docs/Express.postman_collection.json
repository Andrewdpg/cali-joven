{
	"info": {
		"_postman_id": "eb8a3033-18d1-4d84-b3f0-a29d4ae147e5",
		"name": "Express",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32375230",
		"_collection_link": "https://encora-sunflowers.postman.co/workspace/Compunet-III---CaliJoven~fd85ff39-65e3-4898-923a-c7cfea4d46b9/collection/32375230-eb8a3033-18d1-4d84-b3f0-a29d4ae147e5?action=share&source=collection_link&creator=32375230"
	},
	"item": [
		{
			"name": "1. Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"auth-token\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Admin Name\",\r\n    \"email\": \"admin@example.com\",\r\n    \"password\": \"Admin123*\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/auth/register",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"auth-token\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Admin Name\",\r\n    \"email\": \"admin@example.com\",\r\n    \"password\": \"Admin123*\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/auth/register",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Normal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"auth-token\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - user, token, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.message).to.exist.and.to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Message content is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message.content).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"andres2@example.com\",\r\n    \"password\": \"Nose123*\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/auth/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"auth-token\", pm.response.json().token);\r",
									"pm.globals.set(\"user_id\", pm.response.json().user._id);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - user, token, and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.message).to.exist.and.to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the user object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.user).to.be.an('object');\r",
									"    pm.expect(responseData.user._id).to.be.a('string');\r",
									"    pm.expect(responseData.user.name).to.be.a('string');\r",
									"    pm.expect(responseData.user.email).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@example.com\",\r\n    \"password\": \"Admin123*\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/auth/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. User",
			"item": [
				{
					"name": "All users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"other_id\", pm.response.json()[0]._id);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the structure of the response JSON\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(user) {\r",
									"        pm.expect(user).to.be.an('object');\r",
									"        pm.expect(user).to.have.property('_id');\r",
									"        pm.expect(user).to.have.property('name');\r",
									"        pm.expect(user).to.have.property('email');\r",
									"        pm.expect(user).to.have.property('password');\r",
									"        pm.expect(user).to.have.property('createdAt');\r",
									"        pm.expect(user).to.have.property('updatedAt');\r",
									"        pm.expect(user).to.have.property('__v');\r",
									"        pm.expect(user.authorities).to.be.an('array');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the response contains the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    responseData.forEach(function(user) {\r",
									"        pm.expect(user).to.have.property('_id');\r",
									"        pm.expect(user).to.have.property('name');\r",
									"        pm.expect(user).to.have.property('email');\r",
									"        pm.expect(user).to.have.property('authorities');\r",
									"        pm.expect(user).to.have.property('createdAt');\r",
									"        pm.expect(user).to.have.property('updatedAt');\r",
									"        pm.expect(user).to.have.property('__v');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/user",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"user_id\", pm.response.json()._id);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - _id, name, and email\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('_id');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the user object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData._id).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/user/{{user_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('_id');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"    pm.expect(responseData).to.have.property('authorities');\r",
									"    pm.expect(responseData).to.have.property('createdAt');\r",
									"    pm.expect(responseData).to.have.property('updatedAt');\r",
									"    pm.expect(responseData).to.have.property('__v');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the authorities array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.authorities).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"CreatedAt and updatedAt are in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");\r",
									"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\":\"Administrador\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/user/{{user_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Give role to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response includes the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('success', 'message', 'data', 'timestamp', 'version');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data's resource object includes the required fields _id, name, and email\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data.resource).to.be.an('object');\r",
									"    pm.expect(responseData.data.resource._id).to.exist;\r",
									"    pm.expect(responseData.data.resource.name).to.exist;\r",
									"    pm.expect(responseData.data.resource.email).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the createdAt field is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"createdAt should be in valid date format\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\":\"Administrador\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/user/{{user_id}}/role/integrante",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"user",
								"{{user_id}}",
								"role",
								"integrante"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove role from user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Resource _id is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data.resource._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Resource _id should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data.resource.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the createdAt field is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.data.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\":\"Administrador\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/user/{{user_id}}/role/integrante",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"user",
								"{{user_id}}",
								"role",
								"integrante"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields _id, name, and email\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData._id).to.exist;\r",
									"    pm.expect(responseData.name).to.exist;\r",
									"    pm.expect(responseData.email).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response content type is 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response data is an object and not an array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email field is in a valid email format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.email).to.be.a('string');\r",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/user/{{other_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"user",
								"{{other_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Organization",
			"item": [
				{
					"name": "Create organization [admin]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - status and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains the expected fields for organization creation\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('status', 'message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains the required fields for error handling\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Consejo Distrital de Juventud\",\r\n    \"acronym\": \"CDJ\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/organization",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "All organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - id, name, and acronym\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(org) {\r",
									"        pm.expect(org).to.have.property('id');\r",
									"        pm.expect(org).to.have.property('name');\r",
									"        pm.expect(org).to.have.property('acronym');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Id is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(org){\r",
									"    pm.expect(org.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");\r",
									"  });\r",
									"});\r",
									"\r",
									"pm.test(\"Name is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(org) {\r",
									"        pm.expect(org.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/organization",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, name, and acronym\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.name).to.exist;\r",
									"    pm.expect(responseData.acronym).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response data has the correct schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('name').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('acronym').that.is.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the response format is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/organization/{{organization_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"organization",
								"{{organization_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Data resource user, organization, and _id are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('object');\r",
									"    pm.expect(responseData.data.resource).to.be.an('object');\r",
									"    pm.expect(responseData.data.resource.user).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(responseData.data.resource.organization).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(responseData.data.resource._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"CreatedAt and updatedAt are in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"createdAt should be in valid date format\");\r",
									"    pm.expect(responseData.data.resource.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"updatedAt should be in valid date format\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"role\": \"Gestor de moneda\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/organization/{{organization_id}}/user/{{user_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"organization",
								"{{organization_id}}",
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update from organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.data).to.exist;\r",
									"    pm.expect(responseData.data.updatedAt).to.exist;\r",
									"    pm.expect(responseData.data.resource).to.exist;\r",
									"    pm.expect(responseData.data.resource._id).to.exist;\r",
									"    pm.expect(responseData.data.resource.user).to.exist;\r",
									"    pm.expect(responseData.data.resource.organization).to.exist;\r",
									"    pm.expect(responseData.data.resource.createdAt).to.exist;\r",
									"    pm.expect(responseData.data.resource.updatedAt).to.exist;\r",
									"    pm.expect(responseData.data.resource.__v).to.exist;\r",
									"    pm.expect(responseData.timestamp).to.exist;\r",
									"    pm.expect(responseData.version).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the updatedAt field in the response data\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data.updatedAt).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the resource object contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.data.resource).to.be.an('object');\r",
									"    pm.expect(responseData.data.resource).to.have.property('_id');\r",
									"    pm.expect(responseData.data.resource).to.have.property('user');\r",
									"    pm.expect(responseData.data.resource).to.have.property('organization');\r",
									"    pm.expect(responseData.data.resource).to.have.property('createdAt');\r",
									"    pm.expect(responseData.data.resource).to.have.property('updatedAt');\r",
									"    pm.expect(responseData.data.resource).to.have.property('__v');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Timestamp is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp should be in ISO 8601 format\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"role\": \"Gestor de monedas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/organization/{{organization_id}}/user/{{user_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"organization",
								"{{organization_id}}",
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove from organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is null\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    pm.expect(responseData).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response for DELETE request is empty\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    \r",
									"    pm.expect(responseData).to.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"role\": \"Gestor de moneda\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/organization/{{organization_id}}/user/{{user_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"organization",
								"{{organization_id}}",
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Post",
			"item": [
				{
					"name": "All posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"post_id\", pm.response.json()[0]._id);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response schema for required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(function(post) {\r",
									"        pm.expect(post).to.have.property('_id').that.is.a('string');\r",
									"        pm.expect(post).to.have.property('title').that.is.a('string');\r",
									"        pm.expect(post).to.have.property('description').that.is.a('string');\r",
									"        pm.expect(post).to.have.property('type').that.is.a('string');\r",
									"        pm.expect(post).to.have.property('images').that.is.an('array');\r",
									"        pm.expect(post).to.have.property('published_by').that.is.a('string');\r",
									"        pm.expect(post).to.have.property('organizer_id').that.is.a('string');\r",
									"        pm.expect(post).to.have.property('cities').that.is.an('array');\r",
									"        pm.expect(post).to.have.property('tags').that.is.an('array');\r",
									"        pm.expect(post).to.have.property('date').that.is.a('string');\r",
									"        pm.expect(post).to.have.property('location').that.is.a('string');\r",
									"        pm.expect(post).to.have.property('registration_link').that.is.a('string');\r",
									"        pm.expect(post).to.have.property('createdAt').that.is.a('string');\r",
									"        pm.expect(post).to.have.property('updatedAt').that.is.a('string');\r",
									"        pm.expect(post).to.have.property('__v').that.is.a('number');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Images array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.images).to.exist;\r",
									"        pm.expect(item.images).to.be.an('array');\r",
									"        // Add more specific checks for the expected number of elements in the images array if needed\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Cities and tags arrays are present and contain expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.cities).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Cities array should not be empty\");\r",
									"        pm.expect(item.tags).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Tags array should not be empty\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/post",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"post_id\", pm.response.json()._id);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const requiredFields = [\"_id\", \"title\", \"description\", \"type\", \"images\", \"published_by\", \"organizer_id\", \"cities\", \"tags\", \"date\", \"location\", \"registration_link\", \"createdAt\", \"updatedAt\", \"__v\"];\r",
									"    \r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.all.keys(requiredFields);\r",
									"});\r",
									"\r",
									"pm.test(\"Location field should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.location).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/post/{{post_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"post",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create post [admin]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"post_id\", pm.response.json().data.resource._id);\r",
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Success field in the response should exist and be a boolean\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData.success).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"Message field in the response should exist and be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"Descripción del post, todo el contenido basico\",\r\n    \"type\": \"event\",\r\n    \"organizer_id\": \"67e2bbe68c51267af06e56e3\",\r\n    \"title\": \"Titulo del evento\",\r\n    \"cities\": [\"Cali\"],\r\n    \"tags\":[\"No se\"],\r\n    \"date\": \"04/17/2025\",\r\n    \"location\": \"-4.0127123 1.291772313\",\r\n    \"registration_link\": \"hola.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/post",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post [admin]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/post/{{post_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"post",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const requiredFields = [\"_id\", \"title\", \"description\", \"type\", \"images\", \"published_by\", \"organizer_id\", \"cities\", \"tags\", \"date\", \"location\", \"registration_link\", \"createdAt\", \"updatedAt\", \"__v\"];\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(responseData).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Images array should be empty or contain valid image URLs\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    \r",
									"    if (responseData.images.length > 0) {\r",
									"        responseData.images.forEach(function(imageUrl) {\r",
									"            pm.expect(imageUrl).to.match(/^https?:\\/\\/.*\\.(png|jpg|jpeg|gif)$/);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Published_by, organizer_id, and cities are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.published_by).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Published_by should be a non-empty string\");\r",
									"    pm.expect(responseData.organizer_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"organizer_id should be a non-empty string\");\r",
									"    pm.expect(responseData.cities).to.be.an('array');\r",
									"    responseData.cities.forEach(function(city) {\r",
									"        pm.expect(city).to.be.a('string').and.to.have.lengthOf.at.least(1, \"City should be a non-empty string\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"New Title Example\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/post/{{fixed_post_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"post",
								"{{fixed_post_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Attend",
			"item": [
				{
					"name": "Enroll at event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData.data).to.have.property('createdAt');\r",
									"    pm.expect(responseData.data).to.have.property('resource');\r",
									"    pm.expect(responseData.data.resource).to.have.property('user');\r",
									"    pm.expect(responseData.data.resource).to.have.property('event');\r",
									"    pm.expect(responseData.data.resource).to.have.property('remainders');\r",
									"    pm.expect(responseData.data.resource).to.have.property('_id');\r",
									"    pm.expect(responseData.data.resource).to.have.property('createdAt');\r",
									"    pm.expect(responseData.data.resource).to.have.property('updatedAt');\r",
									"    pm.expect(responseData.data.resource).to.have.property('__v');\r",
									"    pm.expect(responseData).to.have.property('timestamp');\r",
									"    pm.expect(responseData).to.have.property('version');\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the 'createdAt' field is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData.data).to.have.property('createdAt').that.is.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate that the 'updatedAt' field is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('object');\r",
									"    pm.expect(responseData.data.resource).to.be.an('object');\r",
									"    pm.expect(responseData.data.resource.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"remainders\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/post/{{fixed_post_id}}/enroll",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"post",
								"{{fixed_post_id}}",
								"enroll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete enroll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/post/{{fixed_post_id}}/enroll",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"post",
								"{{fixed_post_id}}",
								"enroll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enrolled at event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is an empty array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body structure for successful enrollments\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array').that.is.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/post/{{fixed_post_id}}/enroll",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"post",
								"{{fixed_post_id}}",
								"enroll"
							]
						}
					},
					"response": []
				},
				{
					"name": "My enrollments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(function(enrollment) {\r",
									"        pm.expect(enrollment.event._id).to.exist;\r",
									"        pm.expect(enrollment.event.title).to.exist;\r",
									"        pm.expect(enrollment.event.description).to.exist;\r",
									"        pm.expect(enrollment.event.type).to.exist;\r",
									"        pm.expect(enrollment.event.images).to.exist;\r",
									"        pm.expect(enrollment.event.published_by).to.exist;\r",
									"        pm.expect(enrollment.event.organizer_id).to.exist;\r",
									"        pm.expect(enrollment.event.cities).to.exist;\r",
									"        pm.expect(enrollment.event.tags).to.exist;\r",
									"        pm.expect(enrollment.event.date).to.exist;\r",
									"        pm.expect(enrollment.event.location).to.exist;\r",
									"        pm.expect(enrollment.event.registration_link).to.exist;\r",
									"        pm.expect(enrollment.event.createdAt).to.exist;\r",
									"        pm.expect(enrollment.event.updatedAt).to.exist;\r",
									"        pm.expect(enrollment.event.__v).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Remainders field is boolean\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.remainders).to.be.a('boolean');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the structure of the 'event' object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.event).to.be.an('object');\r",
									"        pm.expect(item.event._id).to.be.a('string');\r",
									"        pm.expect(item.event.title).to.be.a('string');\r",
									"        pm.expect(item.event.description).to.be.a('string');\r",
									"        pm.expect(item.event.type).to.be.a('string');\r",
									"        pm.expect(item.event.images).to.be.an('array');\r",
									"        pm.expect(item.event.published_by).to.be.a('string');\r",
									"        pm.expect(item.event.organizer_id).to.be.a('string');\r",
									"        pm.expect(item.event.cities).to.be.an('array');\r",
									"        pm.expect(item.event.tags).to.be.an('array');\r",
									"        pm.expect(item.event.date).to.be.a('string');\r",
									"        pm.expect(item.event.location).to.be.a('string');\r",
									"        pm.expect(item.event.registration_link).to.be.a('string');\r",
									"        pm.expect(item.event.createdAt).to.be.a('string');\r",
									"        pm.expect(item.event.updatedAt).to.be.a('string');\r",
									"        pm.expect(item.event.__v).to.be.a('number');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/post/enroll/my-enrollments",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"post",
								"enroll",
								"my-enrollments"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}